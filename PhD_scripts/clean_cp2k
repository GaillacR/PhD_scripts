#!/usr/bin/env python

import os
import sys
import math
import numpy as np
import profile
import gzip
import ReadWrite as rw
import PBC_RG as pbc

def is_int(s):
  try:
    int(s)
    return True
  except ValueError:
    return False

# Atomic masses from Blue Obelisk's elements.xml
atMasses = { "X": 0.0000, "H": 2.014101777, "He": 4.002602, "Li": 6.941, "Be": 9.012182, "B": 10.811, "C": 12.0107, "N": 14.0067,
  "O": 15.9994, "F": 18.9984032, "Ne": 20.1797, "Na": 22.989770, "Mg": 24.3050, "Al": 26.981538, "Si": 28.0855, "P": 30.973761,
  "S": 32.065, "Cl": 35.453, "Ar": 39.948, "K": 39.0983, "Ca": 40.078, "Sc": 44.955910, "Ti": 47.867, "V": 50.9415, "Cr":
  51.9961, "Mn": 54.938049, "Fe": 55.845, "Co": 58.933200, "Ni": 58.6934, "Cu": 63.546, "Zn": 65.409, "Ga": 69.723, "Ge": 72.64,
  "As": 74.92160, "Se": 78.96, "Br": 79.904, "Kr": 83.798, "Rb": 85.4678, "Sr": 87.62, "Y": 88.90585, "Zr": 91.224, "Nb":
  92.90638, "Mo": 95.94, "Tc": 98, "Ru": 101.07, "Rh": 102.90550, "Pd": 106.42, "Ag": 107.8682, "Cd": 112.411, "In": 114.818,
  "Sn": 118.710, "Sb": 121.760, "Te": 127.60, "I": 126.90447, "Xe": 131.293, "Cs": 132.90545, "Ba": 137.327, "La": 138.9055,
  "Ce": 140.116, "Pr": 140.90765, "Nd": 144.24, "Pm": 145, "Sm": 150.36, "Eu": 151.964, "Gd": 157.25, "Tb": 158.92534, "Dy":
  162.500, "Ho": 164.93032, "Er": 167.259, "Tm": 168.93421, "Yb": 173.04, "Lu": 174.967, "Hf": 178.49, "Ta": 180.9479, "W":
  183.84, "Re": 186.207, "Os": 190.23, "Ir": 192.217, "Pt": 195.078, "Au": 196.96655, "Hg": 200.59, "Tl": 204.3833, "Pb": 207.2,
  "Bi": 208.98038, "Po": 209, "At": 210, "Rn": 222, "Fr": 223, "Ra": 226, "Ac": 227, "Th": 232.0381, "Pa": 231.03588, "U":
  238.02891, "Np": 237, "Pu": 244, "Am": 243, "Cm": 247, "Bk": 247, "Cf": 251, "Es": 252, "Fm": 257, "Md": 258, "No": 259, "Lr":
  262, "Rf": 261, "Db": 262, "Sg": 266, "Bh": 264, "Hs": 277, "Mt": 268, "Ds": 281, "Rg": 272 }

if len(sys.argv)<3:
  print "Usage ", sys.argv[0], "xyz, vel, frc or ener CP2K filename Cell parameters filename"
  exit(1)

print sys.argv[1], sys.argv[2]

# Read the cell parameters in
split = str.split
cell_f = sys.argv[2]
[Cell, Cell.C] = rw.readCell(cell_f)
################################################

step2=-1
step3=-1
step=-1
count2=-1
count3=-1
count=0
cl=0
cl_tmp=0
Numb_Atoms = 0
traj=list()
count_traj = 0
x_G = 0.0
y_G = 0.0
z_G = 0.0
traj2 = ["H",0.0,0.0,0.0]
Mass = 0.0
extlist1=["xyz"]
extlist2=["vel","frc"]

ratoms=[]
r3=[0,1,2]

if (sys.argv[1].split(".")[-1]=="gz"):
  sys.argv[1] = sys.argv[1].replace(".gz","")
  print sys.argv

try:
  fin = open(sys.argv[1],"r")
except IOError as e:
  fin = gzip.open(sys.argv[1]+".gz",'rt')

with open((sys.argv[1].split("."))[0]+"_clean."+sys.argv[1].split(".")[1],"w") as fout:
  if (sys.argv[1].split(".")[1] in extlist1):
    for line in fin:
      sp = line.split()
      if (cl==0):
        Numb_Atoms = int(sp[0])
        ratoms = [x for x in range(Numb_Atoms)]
        traj = ["H 0.0 0.0 0.0" for l in ratoms]
        print len(traj)
      if (cl!=0):
        if ("i" in sp and "=" in sp):
          count_tmp = int(sp[2].strip(","))
          count_traj = 0
          x_G = 0.0
          y_G = 0.0
          z_G = 0.0
          traj = ["H 0.0 0.0 0.0" for l in ratoms]
          if (count_tmp > count2): count = count_tmp
          if (count > count3):
            fout.write(str(Numb_Atoms)+"\n"+line)
            count3 = count
            cl_tmp = cl
          if (count > count2): count2=count
        else:
          if (cl<=cl_tmp+Numb_Atoms and cl>cl_tmp):
            traj[count_traj] = line
            ## Wrapping
            r_G = [float(sp[1]),float(sp[2]),float(sp[3])]
            #######################
            x_G = x_G + r_G[0]*float(atMasses[sp[0]])
            y_G = y_G + r_G[1]*float(atMasses[sp[0]])
            z_G = z_G + r_G[2]*float(atMasses[sp[0]])
            if (cl<Numb_Atoms+2): Mass = Mass + float(atMasses[sp[0]])
            count_traj = count_traj + 1
          elif (cl==cl_tmp+Numb_Atoms+1):
            #if (cl<Numb_Atoms+10000) : print x_G/Mass, y_G/Mass, z_G/Mass, Mass
            for l in ratoms:
              if (Mass==0):
                print line
                print "Mass is 0"
                exit(1)
              sp = traj[l].split()
              traj2[0] = sp[0]
              ## Wrapping
              r_G = [float(sp[1]),float(sp[2]),float(sp[3])]
              r_G[0] = r_G[0] - x_G/Mass
              r_G[1] = r_G[1] - y_G/Mass
              r_G[2] = r_G[2] - z_G/Mass
              rr_G = [0.0 for z in r3]
              pbc.cart2red(r_G,rr_G,Cell)
              if (max(rr_G)>0.5 or min(rr_G)<-0.5):
                for k in r3:
                  if (abs(rr_G[k])>0.5): rr_G[k] = rr_G[k] - round(rr_G[k])
              pbc.red2cart(r_G,rr_G,Cell)
              if (Cell.alpha==90.0 and Cell.beta==90.0 and Cell.gamma==90.0):
                if (abs(r_G[0])>Cell.a/2 or abs(r_G[1])>Cell.b/2 or abs(r_G[2])>Cell.c/2):
                  print r_G
                  print rr_G
                  print int(round(rr_G[0])), int(round(rr_G[1])), int(round(rr_G[2]))
                  print [Cell.a/2,Cell.b/2,Cell.c/2]
                  exit(1)

              #######################
              traj2[1] = str(r_G[0])
              traj2[2] = str(r_G[1])
              traj2[3] = str(r_G[2])
              fout.write("\t".join(traj2))
              fout.write("\n")
      cl = cl +1
    for l in ratoms:
      if (Mass==0):
        print line
        print "Mass is 0"
        exit(1)
      sp = traj[l].split()
      traj2[0] = sp[0]
      # Wrapping
      r_G = [float(sp[1]),float(sp[2]),float(sp[3])]
      rr_G = [0.0 for z in r3]
      r_G[0] = r_G[0] - x_G/Mass
      r_G[1] = r_G[1] - y_G/Mass
      r_G[2] = r_G[2] - z_G/Mass
      pbc.cart2red(r_G,rr_G,Cell)
      if (max(rr_G)>0.5 or min(rr_G)<-0.5):
        for k in r3:
          if (abs(rr_G[k])>0.5): rr_G[k] = rr_G[k] - round(rr_G[k])
      pbc.red2cart(r_G,rr_G,Cell)
      #######################
      traj2[1] = str(r_G[0])
      traj2[2] = str(r_G[1])
      traj2[3] = str(r_G[2])
      fout.write("\t".join(traj2))
      fout.write("\n")

  elif (sys.argv[1].split(".")[1] in extlist2):
    for line in fin:
      sp = line.split()
      if (cl==0):
        Numb_Atoms = int(sp[0])
        ratoms = [x for x in range(Numb_Atoms)]
        traj = ["H 0.0 0.0 0.0" for l in ratoms]
        print len(traj)
      if (cl!=0):
        if ("i" in sp and "=" in sp):
          count_tmp = int(sp[2].strip(","))
          count_traj = 0
          traj = ["H 0.0 0.0 0.0" for l in ratoms]
          if (count_tmp > count2): count = count_tmp
          if (count > count3):
            fout.write(str(Numb_Atoms)+"\n"+line)
            count3 = count
            cl_tmp = cl
          if (count > count2): count2=count
        else:
          if (cl<=cl_tmp+Numb_Atoms and cl>cl_tmp):
            traj[count_traj] = line
            if (len(line.split())<4):
              print line
              exit(1)
            count_traj = count_traj + 1
          elif (cl==cl_tmp+Numb_Atoms+1):
            for l in ratoms:
              traj2[0] = traj[l].split()[0]
              traj2[1] = str(float(traj[l].split()[1]))
              traj2[2] = str(float(traj[l].split()[2]))
              traj2[3] = str(float(traj[l].split()[3]))
              fout.write("\t".join(traj2))
              fout.write("\n")
      cl = cl +1
    for l in ratoms:
      traj2[0] = traj[l].split()[0]
      traj2[1] = str(float(traj[l].split()[1]))
      traj2[2] = str(float(traj[l].split()[2]))
      traj2[3] = str(float(traj[l].split()[3]))
      fout.write("\t".join(traj2))
      fout.write("\n")

  elif (sys.argv[1].split(".")[1]=="ener"):
    for line in fin:
      if (cl==0): fout.write(line)
      if (cl!=0):
        sp = line.split()
        if (is_int(sp[0])==False):
          print "Look at line", cl, sp[0], line
          print sp[0], sp[1]
          print sp
          exit(1)
        if (int(sp[0])==step2+1): step = int(sp[0])
        if (step==step3+1):
          fout.write(line)
          step3 = step
        if (step==step2+1): step2 = step
      cl = cl + 1

